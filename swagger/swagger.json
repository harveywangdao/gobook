{
    "swagger": "2.0",
    "info": {
        "title": "book API",
        "description": "book blockchain",
        "version": "1.0.0",
        "termsOfService": "http://beego.me/",
        "contact": {
            "email": "1272777053@qq.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/v1",
    "paths": {
        "/article/addArticle": {
            "post": {
                "tags": [
                    "article"
                ],
                "description": "add article",
                "operationId": "ArticleController.AddArticle",
                "parameters": [
                    {
                        "in": "formData",
                        "name": "title",
                        "description": "title",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "text",
                        "description": "text",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "tags",
                        "description": "tags",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ApiResult"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/article/queryAllArticles": {
            "get": {
                "tags": [
                    "article"
                ],
                "description": "query all articles",
                "operationId": "ArticleController.QueryAllArticles",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ArticlesResult"
                        }
                    },
                    "403": {
                        "description": "no data"
                    }
                }
            }
        },
        "/article/queryOneArticle/{articleId}": {
            "get": {
                "tags": [
                    "article"
                ],
                "description": "query one article",
                "operationId": "ArticleController.QueryArticle",
                "parameters": [
                    {
                        "in": "path",
                        "name": "articleId",
                        "description": "articleId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ArticleResult"
                        }
                    },
                    "403": {
                        "description": "no data"
                    }
                }
            }
        },
        "/article/queryUserArticles": {
            "get": {
                "tags": [
                    "article"
                ],
                "description": "query user articles",
                "operationId": "ArticleController.QueryUserArticles",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ArticlesResult"
                        }
                    },
                    "403": {
                        "description": "no data"
                    }
                }
            }
        },
        "/object/": {
            "get": {
                "tags": [
                    "object"
                ],
                "description": "get all objects",
                "operationId": "ObjectController.GetAll",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    },
                    "403": {
                        "description": ":objectId is empty"
                    }
                }
            },
            "post": {
                "tags": [
                    "object"
                ],
                "description": "create object",
                "operationId": "ObjectController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The object content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} models.Object.Id"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/object/{objectId}": {
            "get": {
                "tags": [
                    "object"
                ],
                "description": "find object by objectid",
                "operationId": "ObjectController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "objectId",
                        "description": "the objectid you want to get",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    },
                    "403": {
                        "description": ":objectId is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "object"
                ],
                "description": "update the object",
                "operationId": "ObjectController.Update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "objectId",
                        "description": "The objectid you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    },
                    "403": {
                        "description": ":objectId is empty"
                    }
                }
            },
            "delete": {
                "tags": [
                    "object"
                ],
                "description": "delete the object",
                "operationId": "ObjectController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "objectId",
                        "description": "The objectId you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "objectId is empty"
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "tags": [
                    "user"
                ],
                "description": "login user into the system",
                "operationId": "UserController.Login",
                "parameters": [
                    {
                        "in": "formData",
                        "name": "email",
                        "description": "email",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "token",
                        "description": "password token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ApiResult"
                        }
                    },
                    "403": {
                        "description": "user not exist"
                    }
                }
            }
        },
        "/user/logout": {
            "post": {
                "tags": [
                    "user"
                ],
                "description": "user logout",
                "operationId": "UserController.logout",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ApiResult"
                        }
                    },
                    "403": {
                        "description": "user not exist"
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "tags": [
                    "user"
                ],
                "description": "create users",
                "operationId": "UserController.CreateUser",
                "parameters": [
                    {
                        "in": "formData",
                        "name": "email",
                        "description": "email",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "token",
                        "description": "password token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ApiResult"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        }
    },
    "definitions": {
        "163.0xc000304c90.false": {
            "title": "false",
            "type": "object"
        },
        "models.ApiResult": {
            "title": "ApiResult",
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/163.0xc000304c90.false",
                    "description": "data"
                },
                "msg": {
                    "description": "error msg",
                    "type": "string"
                },
                "status": {
                    "description": "status",
                    "type": "boolean"
                }
            }
        },
        "models.Article": {
            "title": "Article",
            "type": "object",
            "properties": {
                "createTime": {
                    "description": "createTime",
                    "type": "string",
                    "format": "datetime"
                },
                "id": {
                    "description": "index",
                    "type": "integer",
                    "format": "int64"
                },
                "tags": {
                    "description": "tags",
                    "type": "string"
                },
                "text": {
                    "description": "text",
                    "type": "string"
                },
                "title": {
                    "description": "title",
                    "type": "string"
                },
                "userId": {
                    "description": "userId",
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.ArticleResult": {
            "title": "ArticleResult",
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Article",
                    "description": "data"
                },
                "msg": {
                    "description": "error msg",
                    "type": "string"
                },
                "status": {
                    "description": "status",
                    "type": "boolean"
                }
            }
        },
        "models.ArticlesResult": {
            "title": "ArticlesResult",
            "type": "object",
            "properties": {
                "data": {
                    "description": "data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Article"
                    }
                },
                "msg": {
                    "description": "error msg",
                    "type": "string"
                },
                "status": {
                    "description": "status",
                    "type": "boolean"
                }
            }
        },
        "models.Object": {
            "title": "Object",
            "type": "object",
            "properties": {
                "ObjectId": {
                    "type": "string"
                },
                "PlayerName": {
                    "type": "string"
                },
                "Score": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        }
    },
    "tags": [
        {
            "name": "object",
            "description": "Operations about object\n"
        }
    ]
}